/**

## Grids

###  Inline Grid
Sets the child elements to take up full justified width of the parent.
The prefix class is 'col' (although you can change this in the variables file) and the suffix is the fraction you require.

```html
<div class='grid'>
    <div class='grid__item col'>
       <div class='pink-block block-s'>
            <p>
                full width
            </p>
        </div>
    </div>
</div>
<p>Example two:</p>
<div class='grid'>
    <div class='grid__item col-2-4' >
        <div class='blue-block block-s'>
            <p>
                50%
            </p>
        </div>
    </div>
    <div class='grid__item col-2-4'>
        <div class='blue-block block-s'>
            <p>
                50%
            </p>
        </div>
    </div>
</div>
<p>Example three:</p>
<div class='grid'>
    <div class='grid__item col-1-4'>
        <div class='green-block block-s'>
            <p>
                25%
            </p>
        </div>
    </div>
    <div class='grid__item col-1-4'>
        <div class='green-block block-s'>
            <p>
                25%
            </p>
        </div>
    </div>
    <div class='grid__item col-1-4 '>
        <div class='green-block block-s'>
            <p>
                25%
            </p>
        </div>
    </div>
    <div class='grid__item col-1-4 '>
        <div class='green-block block-s'>
            <p>
                25%
            </p>
        </div>
    </div>
</div>
<p>Example four:</p>
<div class='grid'>
    <div class='grid__item col-6-10'>
        <div class='ts-block block-s'>
            <p>
                60%
            </p>
        </div>
    </div>
    <div class='grid__item col-4-10'>
        <div class='ts-block block-s'>
            <p>
                40%
            </p>
        </div>
    </div>
</div>
<p>Example five:</p>
<div class='grid'>
    <div class='grid__item col-8-10'>
        <div class='tt-block block-s'>
            <p>
                80%
            </p>
        </div>
    </div>
    <div class='grid__item col-2-10'>
        <div class='tt-block block-s'>
            <p>
                20%
            </p>
        </div>
    </div>
</div>
<p>
    Vertical align these grid items in the middle!
</p>

<div class='grid grid--middle'>
    <div class='grid__item col-1-4'>
        <div class='green-block block-s'>
            <p>
                1/4
            </p>
        </div>
    </div>
    <div class='grid__item col-1-4'>
        <div class='green-block block-s'>
            <p>
                1/4
            </p>
        </div>
    </div>
    <div class='grid__item col-1-4'>
        <div class='green-block block-s'>
            <p>
                1/4
            </p>
        </div>
    </div>
    <div class='grid__item col-1-4'>
       <div class='green-block block-s'>
            <p>
                1/4
            </p>
        </div>
    </div>
</div>
```


#### Inline Grid - Responsive

This works exactly the same as what's mentioned above.
You just need to add an extra suffix onto the classes which relates to the breakpoint you want to target.


```html
<div class='grid'>
    <div class='grid__item col-1-4 col--q-small col-2-4--q-medium col-4-10--q-xlarge'>
       <div class='pink-block block-s'>
            <p>
                1<!--<strong>Desktop:</strong> 1/4 <br />
                <strong>Skinny:</strong> 1/2 <br />
               <strong>mobile:</strong> full width<br />
               <strong>wide:</strong> 60/40-->
           </p>
        </div>
    </div>
    <div class='grid__item col-1-4 col--q-small col-2-4--q-medium col-6-10--q-xlarge'>
       <div class='pink-block block-s'>
            <p>
                1
            </p>
        </div>
    </div>
    <div class='grid__item col-1-4 col--q-small col-2-4--q-medium col-4-10--q-xlarge'>
       <div class='pink-block block-s'>
            <p>
                1
            </p>
        </div>
    </div>
    <div class='grid__item col-1-4 col--q-small col-2-4--q-medium col-6-10--q-xlarge'>
       <div class='pink-block block-s'>
            <p>
                1
            </p>
        </div>
    </div>
</div>
```

*/

// Inline block grid
// -----------------------------------------------------------------------------
// [1] Sets the child elements to take up full justified width of the parent
// [2] Overcomes an issue where the :after element blows out the bottom.
// [3] A fix for Internet Explorer 8/9

 .grid {
    font-size: 0;                           /* [2] */
    text-align: justify;                    /* [1] */
    // text-justify: distribute-all-lines;  /* [3] */

    // Not sure if we need the last line as it stuffs up text align:center
    .ie8 & {
        // This fixes and issue mentioned above
        text-justify:normal;
    }
}

    .grid > * {
        @extend .grid__item;
    }

    // Font-size medium reset the block to the context of body (ie, 16px)
    .grid__item {
        @extend %inline-block; /* This extend is found in core */
        @extend %align--top; /* This extend is found in core */
        @extend .text-left; /* This extend is found in typography */
        font-size: medium;

    }

    .grid:after,
    .grid__break {
        @extend %inline-block; /* This extend is found in core */
        content: '';
        height: 0;
        width:100%;
    }

    // Vertical align these grid items in the middle!

    .grid--middle > .grid__item {
        @extend %align--middle; /* This extend is found in core */
    }

    .grid--bottom > .grid__item {
        @extend %align--bottom; /* This extend is found in core */
    }



/**

### Float Grid

Sometimes you don't want an inline block grid, you want a float grid.
Fred doesn't mind what grid you use :).

```html
<div class='grid-float'>
    <div class='col-1-3 '>
        <div class='ts-block'>
            ...
        </div>
    </div>
    <div class='col-1-3 '>
        <div class='ts-block'>
            ...
        </div>
    </div>
    <div class='col-1-3 '>
        <div class='ts-block'>
            ...
        </div>
    </div>
</div>
```

*/


.grid-float {
    width: 100%;
}

    .grid-float:after {
        content: "";
        display: table;
        clear: both;
    }

    .grid-float > [class^=#{quote($grid-column-name)}] {
        @extend .left; //in core
    }



// Print grid classnames

.#{$grid-column-name} {
    width: 100%;
}


// Print column widths via a handy mixin.

@mixin grid-columns($name: $grid-column-name, $stops: 10, $fractional: false, $breakpointSuffix: false) {
    @for $i from 1 to $stops {
        $colName: $i;
        $width: $i / $stops * 100;
        @if $fractional {
            $colName: #{$i + "-"  + $stops};
        }
        @if $breakpointSuffix {
            $colName: #{$colName + $breakpointSuffix};
        }
        .#{$name}-#{$colName} {
            width: #{$width + "%"};
        }
    }
}

@each $breakpoint in $fred-grid-breakpoints {
    @if $breakpoint == "default" {
        @each $division in $grid-divisions {
            @include grid-columns($stops: $division, $fractional: true);
        }
    } @else {
        @include media($breakpoint) {
            $suffix: $breakpoint-classname-prefix + $breakpoint;
            @each $division in $grid-divisions {
                @include grid-columns($name: $grid-column-name, $stops: $division, $fractional: true, $breakpointSuffix: $suffix);
            }
            .#{$grid-column-name + $suffix} {
                width: 100%;
            }
        }
    }
}