// ----------------------------------------------------------------------------
// FRED front-end framework
// ----------------------------------------------------------------------------
// Structure:
//
// 1. Typography - Font familys
// 2. Typography - Line height
// 3. Typography - Font sizes
// 4. Layout - Spacing

// Typography
// ----------------------------------------------------------------------------

$sans-serif-stack:              'Open Sans', sans-serif;
$serif-stack:                   "georgia", serif;

$font-primary:                   $sans-serif-stack; //primary        
$font-primary-italic:            $sans-serif-stack;
$font-primary-bold:              $sans-serif-stack;
$font-primary-bold-italic:       $sans-serif-stack;

//$font-secondary:; 
//$font-secondary-italic:;
//$font-secondary-bold::
//$font-secondary-bold-italic;;     
//$font-tertiary:; ...

$font-size-xxxxl:               72;     //h0
$font-size-xxxl:                36;     //h1
$font-size-xxl:                 32;     //h2
$font-size-xl:                  22;     //h3
$font-size-l:                   20;     //h4
$font-size-m:                   18;     //h5
$font-size-s:                   16;     //h6 & .intro
$font-size-xs:                  14;     //p
$font-size-xxs:                 12;     //.small
$font-size-xxxs:                11;     //.tiny

// Typography - Line height
$base-line-height:              1.428571429; // 20/14


$line-height-xxxxl:               1;     //h0
$line-height-xxxl:                1;     //h1
$line-height-xxl:                 1.2;     //h2
$line-height-xl:                  1.2;     //h3
$line-height-l:                   1.33333333;     //h4
$line-height-m:                   1.2;    //h5
$line-height-s:                   1.2;     //h6 & .intro
$line-height-xs:                  1.5;     //p
$line-height-xxs:                 1.4;     //.small
$line-height-xxxs:                1.4;     //.tiny


// Layout - Spacing: she's a fickle mistress.
// ----------------------------------------------------------------------------

$base-spacing-unit:             1.5em; // 24px

$bs--0:                         0;
$bs--xxxs:                      $base-spacing-unit / 4;     // 6px
$bs--xxs:                       $base-spacing-unit / 3;     // 8px
$bs--xs:                        $base-spacing-unit / 2;     // 12px
$bs--s:                         $base-spacing-unit / 1.5;   // 16px
$bs--m:                         $base-spacing-unit;         // 24px
$bs--l:                         $base-spacing-unit * 1.5;   // 36px
$bs--xl:                        $base-spacing-unit * 2;     // 48px
$bs--xxl:                       $base-spacing-unit * 3;     // 72px
$bs--xxxl:                      $base-spacing-unit * 4;     // 96px


// Layout - block sizes
// -----------------------------------------------------------------------------

$block--xxxs:                   $bs--xxxs $bs--xxxs;        // 6px 6px
$block--xxs:                    $bs--xxxs $bs--xxs;         // 6px 8px
$block--xs:                     $bs--xxs $bs--xs;           // 8px 12px
$block--s:                      $bs--xs $bs--s;             // 12px 16px
$block--m:                      $bs--m $bs--m;              // 24px 24px
$block--l:                      $bs--l $bs--l;              // 36px 36px    
$block--xl:                     $bs--l $bs--xl;             // 36px 48px
$block--xxl:                    $bs--xl $bs--xxl;           // 48px 72px
$block--xxxl:                   $bs--xxl $bs--xxxl;         // 72px 96px


// Colours /Themes
// -----------------------------------------------------------------------------

$bg-color:                      #4D4D4D;
$base-font-color:               #2E2F2B;
$hr-colour:                     #e5e5e5;

// Links
$base-link-color:               #2F72BA;
$base-link-hover-color:         darken($base-link-color, 15%);
$list-block-color:              #ccc;
$sub-header:                    #999;


// Text emphasis colours
// -------------------------
$text-success:                  #468847;
$text-warning:                  #c09853;
$text-danger:                   #b94a48;

$text-muted:                    #999;


// Grays
// -------------------------
$gray-darker:                   lighten(#000, 13.5%); // #222
$gray-dark:                     lighten(#000, 20%);   // #333
$gray:                          lighten(#000, 33.5%); // #555
$gray-light:                    lighten(#000, 60%);   // #999
$gray-lighter:                  lighten(#000, 93.5%); // #eee



// Block theme colours - warning
// -------------------------------
$success-bg-color:              #C5FFC6;
$success-txt-color:             #468847;
$success-border-color:          $success-txt-color;

$warning-bg-color:              #FFFFD2;
$warning-txt-color:             #DAB26D;
$warning-border-color:          $warning-txt-color;

$danger-bg-color:               #FFC9C7;
$danger-txt-color:              #B94A48;
$danger-border-color:           $danger-txt-color;


// Block theme colours - primary, secondary, tertiary
// -------------------------------
$primary-bg-color:			    #fff;
$primary-txt-color:			    $base-font-color; 
$primary-border-color:		    $primary-bg-color;

$secondary-bg-color:		    #f2f2f2;
$secondary-txt-color:		    $base-font-color ; 
$secondary-border-color:	    #E6E6E6;

$tertiary-bg-color:			    #2E2F2B;
$tertiary-txt-color:		    #fff; 
$tertiary-border-color:		    $tertiary-bg-color;

$quarternary-bg-color:		    #4D4D4D;
$quarternary-txt-color:		    #fff; 
$quarternary-border-color:	    $quarternary-bg-color;



// Block theme colours - other block theme colours
// -------------------------------

//green theme box
$green-bg-color:			    #A6E22E;
$green-txt-color:			    $base-font-color; 
$green-border-color:		    $green-bg-color;

//pink theme box
$pink-bg-color:				    #F92672;
$pink-txt-color:			    $base-font-color ; 
$pink-border-color:			    $pink-bg-color;

//blue theme box
$blue-bg-color:				    #4AA1C5;
$blue-txt-color:			    #fff; 
$blue-border-color:			    $blue-bg-color;


// 4. Button themes
// -----------------------------------------------------------------------------

//default active states

$active-btn-bg:				    #333;
$active-btn-text:			    #fff;

// main theme blocks
$primary-btn-bg: 			    #3CBE8A;
$primary-btn-txt:			    #fff;
$primary-btn-border:		    $primary-btn-bg;
$primary-btn-hover-bg:		    darken(#3CBE8A, 7%);
$primary-btn-hover-txt:	        #fff;

$secondary-btn-bg: 			    #999;
$secondary-btn-txt:			    #fff;
$secondary-btn-border:		    $primary-btn-bg;
$secondary-btn-hover-bg:	    #777;
$secondary-btn-hover-txt: 	    #fff;

$tertiary-btn-bg: 			    #ddd;
$tertiary-btn-txt:			    #fff;
$tertiary-btn-border:		    #444;
$tertiary-btn-hover-bg:		    #ccc;
$tertiary-btn-hover-txt:	    #333;


// theme blocks positive negative.. ??
$positive-btn-bg: 			   #3977B1;
$positive-btn-txt:			   #fff;
$positive-btn-border:		   $primary-btn-bg;
$positive-btn-hover-bg:		   darken(#3977B1, 7%);
$positive-btn-hover-txt: 	   $secondary-btn-txt;

$negative-btn-bg: 			   #eb3930;
$negative-btn-txt:			   #fff;
$negative-btn-border:		   #444;
$negative-btn-hover-bg:		   #d8281f;
$negative-btn-hover-txt:	   $negative-btn-txt;


// Breadcrumbs
// -------------------------
$breadcrumb-active-txt:		   #555;
$breadcrumb-txt:			   #666;
$breadcrumb-bg:				   #ccc;


// Badges
// -------------------------
$badge-txt:					   #fff;
$badge-bg:					   red;
$badge-radius:				   10px;

$badge-active-txt:			   #efefef;
$badge-active-bg:			   blue;


// Page header
// -------------------------
$pg-header-border:			   #E6E6E6;
$pg-header-txt:				   #343434;
$pg-header-span-txt:		   slategray;


// Tables
// -------------------------
$table-cell-padding:           8px;
$table-condensed-cell-padding: 5px;

$table-bg:                     transparent; // overall background-color
$table-bg-accent:              #f9f9f9; // for striping
$table-bg-hover:               #f5f5f5;
$table-bg-active:              $table-bg-hover;

$table-border-color:           #ddd; // table and cell border




// Media queries breakpoints
// --------------------------------------------------
$mobile:                         30em;//Portrait regular mobiles//480px
$skinny:                         48em;//Skinny 768px
$desktop:                        60em;//Desktop 960px 
$wide:                           75em;//Wide 1200px


/* So media queries don't overlap when required, provide a maximum */
$skinny-min:              ($mobile + 1);
$skinny-max:              ($desktop - 1);
$desktop-max:              ($wide - 1);


// Form states and alerts
// -------------------------
$state-warning-text:             #c09853;
$state-warning-bg:               #fcf8e3;
//$state-warning-border:           darken(spin($state-warning-bg, -10), 3%);

$state-danger-text:              #b94a48;
$state-danger-bg:                #f2dede;
//$state-danger-border:            darken(spin($state-danger-bg, -10), 3%);

$state-success-text:             #468847;
$state-success-bg:               #dff0d8;
//$state-success-border:           darken(spin($state-success-bg, -10), 5%);

$state-info-text:                #3a87ad;
$state-info-bg:                  #d9edf7;
//$state-info-border:              darken(spin($state-info-bg, -10), 7%);



// Grid system
// --------------------------------------------------
// Number of columns in the grid system
$grid-columns:              12;
// Padding, to be divided by two and applied to the left and right of all columns
$grid-gutter-width:         30px;
// Point at which the navbar stops collapsing
$grid-float-breakpoint:     $skinny;

$container-wide:            $wide;
$container-desktop:         $desktop;





// -----------------------------------------------------------------------------
// Mixins
// -----------------------------------------------------------------------------


// Vendor
// A lightweight way of vendor-prefixing things:
// @include vendor(transition, opacity 0.3s ease-out, margin-top 5s linear);

@mixin vendor($property, $value...){
    -webkit-#{$property}:$value;
       -moz-#{$property}:$value;
        -ms-#{$property}:$value;
         -o-#{$property}:$value;
            #{$property}:$value;
}


// Test one move this when you add images
.img-rounded {
    @include vendor(border-radius, 50% 50% 50% 50%);
}


// Breakpoints
// Define these in variables file?

@mixin media($breakpoint) {
    @if $breakpoint == "mobile" {
        @media only screen and (max-width: $mobile) {
            @content;
        }
    } @else if $breakpoint == "skinny-down" {
        @media only screen and (max-width: $skinny){
           @content;
        } 
    
    } @else if $breakpoint == "skinny" {
        @media only screen and (min-width: $skinny-min) and (max-width: $skinny){
           @content;
        } 
    } @else if $breakpoint == "skinny-up" {
        @media only screen and (min-width: $skinny) {
           @content;
        } 
    
     } @else if $breakpoint == "desktop-up" {
        @media only screen and (min-width: $desktop){
           @content;
        }  
    } @else if $breakpoint == "wide" {
        @media only screen and (min-width: $wide) {
           @content;
        }  
    }
}


// Opacity
// ----------------------------------------------------------------------------

@mixin opacity($value) {
    $ieOpacity: 100 * $value;
    opacity: $value;
    filter: alpha(opacity=#{$ieOpacity});
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{50})";
}

.overlay--75    { @include opacity(0.75); }
.overlay--50    { @include opacity(0.5); }
.overlay--25    { @include opacity(0.25);}


// Simple theme mixins
// ----------------------------------------------------------------------------

@mixin theme-block($bg-color, $txt-color, $border-color){
    background-color:$bg-color;
    color:$txt-color;
    border-color:$border-color;
}


// Sizing shortcuts
@mixin box-dimensions($height, $width){
    height: $height;
    width:  $width;
}

@mixin square($size){
    height: $size;
    width:  $size;
}

// Box sizing
@mixin box-sizing($boxmodel) {
  -webkit-box-sizing: $boxmodel;
     -moz-box-sizing: $boxmodel;
          box-sizing: $boxmodel;
}


// Mixins for forms
// ----------------------------------------------------------------------------

// Webkit-style focus
@mixin tab-focus() {
  // Default
  outline: thin dotted #333;
  // Webkit
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}


// Normalise the approach to CSS placeholders.
// ----------------------------------------------------------------------------
// 1. Firefox 4-18
// 2. Firefox 19+
// 3. Internet Explorer 10+
// 4. Safari and Chrome

@mixin placeholder($color: $input-color-placeholder) {
  &:-moz-placeholder            { color: $color; } //[1]
  &::-moz-placeholder           { color: $color; } //[2]
  &:-ms-input-placeholder       { color: $color; } //[3]
  &::-webkit-input-placeholder  { color: $color; } //[4]
}

@mixin font($font-family, $font-weight , $font-style) {
  font-family: $font-family;
  font-weight: $font-weight;
  font-style: $font-style;
}


// Translate pixels to ems, given a base size.
// By default, assume the base size is 16px (body font size)
@function px-to-em($size, $context: 16) {
    @return #{($size / $context)}em;
}

@function pxem($size, $context: 16) {
    @return #{($size / $context)}em;
}
//
// Extends
// ----------------------------------------------------------------------------
// Common patterns that can be re used and then compiled together for nice
// pretty code.
//
//

%center-element {
    margin-left:auto;
    margin-right:auto;
}

/**
 * Positioning - Absolute, Floating and Clearfixing
 * ----------------------------------------------------------------------------
 */

%relative   { position: relative; }
%absolute   { position: absolute; }

.absolute   { @extend %absolute; }
.relative   { @extend %relative; }

.left       { float:left; }
.right      { float:right; }


    .absolute--bottom-left {
        @extend %absolute;
        bottom:0;
        left:0;
    }

    .absolute--bottom-right {
        @extend %absolute;
        bottom:0;
        right:0;
    }

    .absolute--top-left {
        @extend %absolute;
        top:0;
        left:0;
    }

    .absolute--top-right {
        @extend %absolute;
        top:0;
        right:0;
    }

/**
 * Inline block
 * ----------------------------------------------------------------------------
 * zoom fix for IE6/7 so they correctly display inline-block elements
 * (forces hasLayout)
 */

%inline-block {
    display: inline-block;
    *display: inline;
    *zoom: 1;
}

.inline-block { @extend %inline-block; }

%border {
	border-width: 1px;
	border-style: solid;
}

%clearfix{
	&:before,
	&:after {
	    content: " "; /* 1 */
	    display: table; /* 2 */
	}

	&:after {
	    clear: both;
	}
	
	/**
	 * For IE 6/7 only
	 * Include this rule to trigger hasLayout and contain floats.
	 */
	*zoom: 1;
}

.clearfix           { @extend %clearfix; }
.overflow-hidden    { overflow: hidden; }


/**
 * Fix webkit bug
 * ----------------------------------------------------------------------------
 *
 * Since v22, Chrome makes fat sausage horrible web typography. Fix it with
 * these properties right here. Maybe consider scoping this to a class for
 * chrome/mac osx only at some point?
 */

%fix-webkit-font-rendering {
    -webkit-font-smoothing: antialiased;
    text-rendering: optimizeLegibility;
    .isWindowsChrome & {
        -webkit-font-smoothing: subpixel-antialiased;
    }
}

.antialiased {
    @extend %fix-webkit-font-rendering;
}


/**
 * Hide an element, but make it visible to screen readers
 * ----------------------------------------------------------------------------
 */
.visually-hidden {
    position: absolute;
    overflow: hidden;
    clip: rect(0 0 0 0);
    height: 1px; width: 1px;
    margin: -1px; padding: 0; border: 0;
}

%hide { display: none !important; }
%show { display: block !important; }

.hide { @extend %hide; }
.show { @extend %show; }


%visible    {display: block !important;}
%hidden     {display: none !important;}

/**
 * 1. Visible classes
 * -----------------------------------------------------------------------------
 */
.visible-mobile {
    @extend %hide;
    @include media('mobile-only') {
        display: block !important;
    }
}

.visible-skinny {
    @extend %hide;
    @include media('skinny-only') {
        display: block !important;
    }
}

.visible-desktop {
    @include media('skinny-down') {
        display: none;
    }
}

.visible-wide {
    @extend %hide;
    @include media('wide') {
        //@extend %visible;
        display: block !important;
    }
}

/**
 * 1. hidden classes
 * -----------------------------------------------------------------------------
 */
.hidden-mobile {
    @extend %show;
    @include media('mobile-only') {
        display: none !important;
    }
}

.hidden-skinny {
    @extend %show;
    @include media('skinny-only') {
        display: none !important;
    }
}

.hidden-desktop {
    //??
}

.hidden-wide {
    @extend %show;
    @include media('wide') {
        display: none !important;
    }
}


/**
 * Append and Prepend
 * ----------------------------------------------------------------------------
 */

/**
 * Place something before an element
 */
.prepend{
    &:before{
        content: attr(data-prepend);
        display: inline-block;
    }
}

/**
 * Place something after an element
 */
.append{
    &:after{
        content: attr(data-append);
        display: inline-block;
    }
}
/**
 * 6. Inline block grid
 * -----------------------------------------------------------------------------
 *
 * [1] Sets the child elements to take up full justified width of the parent
 * [2] Overcomes an issue where the :after element blows out the bottom.
 * [3] A fix for Internet Explorer 8/9
 *
 */
.grid {
    text-align: justify;                /* [1] */
    font-size: 0;                       /* [2] */
    text-justify: distribute-all-lines; /* [3] */
    //not sure if we need the last line as it stuffs up text align:center!!!! 
    .ie8 & {
        //this fixes and issue mentioned above
        text-justify:normal;
    }
    
}

    .grid > *{
        @extend .grid__item;
    }

    .grid__item {
        @extend .inline-block;
        font-size:14px;
        text-align: left;
        vertical-align: top;
    }

    .grid:after,
    .grid__break {
        @extend .inline-block;
        content: '';
        height: 0;
        width:100%;
    }


    /**
     * Vertical align these grid items in the middle!
     */
    .grid--middle > .grid__item {
        vertical-align: middle;
    }




.g--1-1{
    width: 100%;
}
.g--1-2 {
    width: 50%;
}
.g--1-3 {
    width: 33%;
}
.g--1-4 {
    width: 25%;
}
.g--3-4 {
    width: 75%;
}

//percentages
.g--60{
    width: 60%;
}
.g--40{
    width: 40%;
}
.g--80{
    width: 80%;
}
.g--20{
    width: 20%;
}


/**
 * Grid - this is used with the inline grid in interim.scss .grid and .grid__item etc
 * I changed the names so they relate to the breakpoints above
 * ----------------------------------------------------------------------------
 */
//.grid {}
//.grid__item {}

//desktop grid //default


//Grid for 'wide' breakpoint
@include media('wide') {

    //fractions
    .g-w--1-1{
        width: 100%;
    }
    .g-w--1-2 {
        width: 50%;
    }
    .g-w--1-4 {
        width: 25%;
    }
    .g-w--1-3 {
        width: 33%;
    }

    //percentages
    .g-w--60 {
        width: 60%;
    }
    .g-w--40 {
        width: 40%;
    }
    .g-w--80 {
        width: 80%;
    }
    .g-w--20 {
        width: 20%;
    }
}

//Grid for 'skinny' breakpoint
@include media('skinny-only') {

    //fractions
    .g-s--1-1{
        width: 100%;
    }
    .g-s--1-2 {
        width: 50%;
    }
    .g-s--1-4 {
        width: 25%;
    }
    .g-s--1-3 {
        width: 33%;
    }

    //percentages
    .g-s--60 {
        width: 60%;
    }
    .g-s--40 {
        width: 40%;
    }
    .g-s--80 {
        width: 80%;
    }
    .g-s--20 {
        width: 20%;
    }
}

//Grid for 'skinny' breakpoint
@include media('mobile-only') {

    //fractions
    .g-m--1-1{
        width: 100%;
    }
    .g-m--1-2 {
        width: 50%;
    }
    .g-m--1-4 {
        width: 25%;
    }
    .g-m--1-3 {
        width: 33%;
    }

    //percentages
    .g-m--60 {
        width: 60%;
    }
    .g-m--40 {
        width: 40%;
    }
    .g-m--80 {
        width: 80%;
    }
    .g-m--20 {
        width: 20%;
    }
}
$sizePrefixes: "--0", "--xxxs", "--xxs", "--xs", "--s", "--m", "--l", "--xl", "--xxl", "--xxxl";
$sizes: $bs--0, $bs--xxxs, $bs--xxs, $bs--xs, $bs--s, $bs--m, $bs--l, $bs--xl, $bs--xxl, $bs--xxxl;
$blockSizes: $block--xxxs, $block--xxs, $block--xs, $block--s, $block--m, $block--l, $block--xl, $block--xxl, $block--xxxl;


// Spacing helpers
// ----------------------------------------------------------------------------
@mixin sizer($class, $prefixes, $property, $array) {
    $index:1;
    @each $prefix in $prefixes {
        .#{$class + $prefix} { #{$property}: nth($array, $index)  }
        $index: $index + 1;
    }
}

@mixin spacing($margin: true, $padding: true) {
    @if $margin {
        @include sizer("m", $sizePrefixes,  "margin-top", $sizes);
        @include sizer("mb", $sizePrefixes,  "margin-bottom", $sizes);
        @include sizer("mr", $sizePrefixes,  "margin-right", $sizes);
        @include sizer("ml", $sizePrefixes,  "margin-left", $sizes);
    }

    @if $padding {
        @include sizer("p", $sizePrefixes,  "padding-top", $sizes);
        @include sizer("pb", $sizePrefixes,  "padding-bottom", $sizes);
        @include sizer("pr", $sizePrefixes,  "padding-right", $sizes);
        @include sizer("pl", $sizePrefixes,  "padding-left", $sizes);
    }
}

@mixin block(){
//    @include sizer("block", $sizePrefixes,  "padding", $blockSizes);
}

@include spacing($margin: true, $padding: false);

//@include sizer("block", $sizePrefixes,  "padding", $blockSizes);
//@include block();

/**
 * Responsive spacing elements
 * ----------------------------------------------------------------------------
 */

@include media('skinny') {
    @include sizer("m-skinny", $sizePrefixes,  "margin-top", $sizes);
}

@include media('mobile') {
    @include sizer("m-small", $sizePrefixes,  "margin-top", $sizes);
}


/**
 * Responsive blocks
 * ----------------------------------------------------------------------------
 */

@include media('skinny') {
    @include sizer("block-skinny", $sizePrefixes,  "padding", $sizes);
}

@include media('mobile') {
    @include sizer("block-small", $sizePrefixes,  "padding", $sizes);
}
/**
 * Antialias everything by default, and set the line-height.
 */
html,
body {
    @extend %fix-webkit-font-rendering;
    line-height: $base-line-height;
    font-size: 100%;
}




/**
 * onMediaQuery sets the font-family on HTML, so declare your font-family
 * on the body element instead.
 */
body {
    @extend .font-primary;
}


/**
 * Font declarations
 * ----------------------------------------------------------------------------
 */
.font-primary {
    @include font($font-primary, 400 , normal);
}

    .font-primary--italic {
        @include font($font-primary, 400 , italic);
        .ie8 & {
            font-family:$font-primary-italic;
        }
    }

    .font-primary--bold {
        @include font($font-primary, 700 , normal);
        .ie8 & {
            font-family:$font-primary-bold;
        }
    }

    .font-primary--bold-italic {
        @include font($font-primary, 700 , italic);
        .ie8 & {
            font-family:$font-primary-bold-italic;
        }
    }

.sans       { font-family:$sans-serif-stack; }
.serif      { font-family:$serif-stack; }

.font-size-xxxxl                { font-size: px-to-em($font-size-xxxxl);}
.font-size-xxxl                 { font-size: px-to-em($font-size-xxxl);}
.font-size-xxl                  { font-size: px-to-em($font-size-xxl);}
.font-size-xl                   { font-size: px-to-em($font-size-xl);}
.font-size-l                    { font-size: px-to-em($font-size-l);}
.font-size-m                    { font-size: px-to-em($font-size-m);}
.font-size-s                    { font-size: px-to-em($font-size-s);}
.font-size-xs                   { font-size: px-to-em($font-size-xs);}
.font-size-xxs                  { font-size: px-to-em($font-size-xxs);}
.font-size-xxxs                 { font-size: px-to-em($font-size-xxxs);}


/**
 * Headings
 * ----------------------------------------------------------------------------
 */
h1, h2, h3, h4, h5, h6 {
    @extend .mb--0;
    &:first-child {
        @extend .m--0;
    }
}


/**
 *  3. Paragraph styles
 * ----------------------------------------------------------------------------
 */

.intro {
    @extend .font-size-s;
}

.small {
    @extend .font-size-xxs;
}

.tiny {
    @extend .font-size-xxxs;
}
.caption {

}
.pullquote {

}


/**
 * 5. hr
 * ----------------------------------------------------------------------------
 */

hr {
    border: none;
    height: 1px;
}


/**
 * Text helpers
 * ----------------------------------------------------------------------------
 */
.uppercase      { text-transform:uppercase; }
.lowercase      { text-transform:lowercase; }

.text-align--left       { text-align: left; }
.text-align--right      { text-align: right; }
.text-align--center     { text-align: center; }
.text--nowrap           { white-space: nowrap; }

.text--overflow {
    @extend .inline-block;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    width: 100%;
}


/**
 * Arrows
 * ----------------------------------------------------------------------------
 * $base-spacing-unit: 1.4em
 *
 *
 * Apply the modifier classes to the parent. For instance, this will put an
 * arrow in the top left corner of the containing div:
 *
 * <div class='arrow__left'>
 *        <i class='arrow arrow_top'></i>
 * </div>
 *
 */

.arrow{/*i,span*/
    @extend %inline-block;
    position: absolute;
    width: 0;
    height: 0;
    border-color: transparent;
    border-style: solid;
    border-width: .4em;
}

    .arrow-top{
        border-top-width: 0;
        border-bottom-color: inherit;
        top: -.4em;
    }

    .arrow-bottom{
        border-bottom-width: 0;
        border-top-color: inherit;
        bottom: -.4em;
    }

    .arrow-left{
        border-left-width: 0;
        border-right-color: inherit;
        left: -.4em;
    }

    .arrow-right{
        border-right-width: 0;
        border-left-color: inherit;
        right: -.4em;
    }

.arrow--left,
.arrow--right,
.arrow--side,
.arrow--center{/*div,block*/
    position:relative;
}

    .arrow--center .arrow{
        left:0;
        right:0;
        margin-left:auto;
        margin-right:auto;
    }

    .arrow--left .arrow{
        left: $base-spacing-unit;
    }

    .arrow--right .arrow{
        right: $base-spacing-unit;
    }

    .arrow--side .arrow{
        top: $base-spacing-unit;
    }

/**
 * Badges
 * ----------------------------------------------------------------------------
 *
 * <span class='badge'>
 *      3
 * </span>
 *
 */
.badge {
    @extend %inline-block;
    min-width: .625em;
    padding: .1875em .4375em;
    line-height: $base-line-height;
    vertical-align: baseline;
    white-space: nowrap;
    text-align: center;

    // Quick fix for labels/badges in buttons
    position: relative;
    top: -1px;

    // Empty badges collapse automatically (not available in IE8)
    &:empty {
        display: none;
    }
}
/**
 * 3. Generic blocks
 * ----------------------------------------------------------------------------

 */

// making sure the first element has no margin on it
%block {
    & > :first-child {
         margin-top:0;
    }
    @extend .clearfix;
    margin-top:1em;
}

.block--stacked {
   //only use this id we don't want a top margin on it
   margin-top:0!important;
}

    .block--xxxs, 
    .block--xxs, 
    .block--xs, 
    .block--s,
    .block--m,
    .block--l, 
    .block--xl, 
    .block--xxl, 
    .block--xxxl {
        @extend %block;
    }



.breadcrumbs {
    > li {
        @extend %inline-block;
        &+li:before {
            content: "/\00a0"; // Unicode space added since inline-block means non-collapsing white-space
            padding: 0 5px;
        }
    }
}
/**
 * Buttons
 * -----------------------------------------------------------------------------
 *
 * 1. Allow us to better style box model properties.
 * 2. Line different sized buttons up a little nicer.
 * 3. Stop buttons wrapping and looking broken.
 * 4. Make buttons inherit font styles.
 * 5. Force all elements using buttons to appear clickable.
 * 6. Normalise box model styles.
 * 7. If the button’s text is 1em, and the button is (2.5 * font-size) tall, then
 *    there is 1em of space above and below that text. We therefore apply 1em
 *    of space to the left and right, as padding, to keep consistent spacing.
 * 8. Basic cosmetics for default buttons. Change or override at will.
 * 9. Don’t allow buttons to have underlines; it kinda ruins the illusion.
 */
.btn{
    @extend .inline-block;                          /* [1] */
    //@extend .user-select-none;
    vertical-align: middle;                         /* [2] */
    white-space: nowrap;                            /* [3] */
    font-family: inherit;                           /* [4] */
    cursor: pointer;                                /* [5] */
    margin: inherit 0 0 0;                          /* [6] */
    padding-top: 0;                                 /* [6] */
    padding-bottom: 0;                              /* [6] */
    line-height: 2.5;                               /* [7] */
    padding-right: $base-spacing-unit;              /* [7] */
    padding-left: $base-spacing-unit;               /* [7] */
    border-width: 1px;
    border-color: transparent;
    border-style: solid;
    @include vendor(border-radius, $base-spacing-unit/4);

    &,
    &:hover{
        text-decoration:none;   /* [9] */
    }

    &:active,
    &:focus{
        outline:none;
    }
}

/**
 * Button modifiers
 * ----------------------------------------------------------------------------
 * E.g:
    <a class='btn btn--large'>
        My big button
    </a>
 * Or,
    <a class='btn btn--small btn--soft'>
        My small rounded button
    </a>
 */
.btn--large,
.btn--icon-large,
.btn--icon-large--rev,
.btn--icon-only--large {
    line-height: 3.5;         
}

.btn--large {
    padding-right: $base-spacing-unit * 2;          
    padding-left: $base-spacing-unit * 2;  
}

.btn--small,
.btn--icon-small,
.btn--icon-small--rev,
.btn--icon-only--small {
    line-height: 2;   
}

.btn--small{
    padding-right: $base-spacing-unit / 2;          
    padding-left: $base-spacing-unit / 2;  
}

/**
 * Pill type buttons with (rounded) ends
 * ----------------------------------------------------------------------------
 */
.btn--soft {
    @include vendor(border-radius, 200px);
}

.btn--hard {
    @include vendor(border-radius, 0);
}


/**
 * Block buttons stretch to the full width of their parent (handy!)
 */
.btn--block{
    display: block;
    text-align: center;
}

/**
 * Make a button behave like a block at mobile only (also handy)
 */
@media only screen and (max-width:37.5em) {
    .btn--block-mobile{
        text-align: center;
        display: block;
    }
}

/**
 * Submit buttons
 * ----------------------------------------------------------------------------
 * FireFox doesn't like line-heights on submit buttons. Stick a class on submit
 * buttons and make sure the padding's the same as your default button :)
 */
.btn--submit{
    line-height: 1;
    padding-top: $base-spacing-unit / 2;
    padding-bottom: $base-spacing-unit / 2;
}

.btn--submit-large{
    line-height: 1;
    padding-top: $base-spacing-unit;
    padding-bottom: $base-spacing-unit;
}

.btn--submit-small{
    line-height: 1;
    padding-top: $base-spacing-unit / 4;
    padding-bottom: $base-spacing-unit / 4;
}


/**
 * Buttons with icons
 * ----------------------------------------------------------------------------
 * E.g:
    <a class='btn btn--icon'>
        <i class='i sprite_icon_edit'></i>
        My big button
    </a>
 * Or,
    <a class='btn btn--icon-large--rev'>
        My small rounded button
        <i class='i sprite_icon_close'></i>
    </a>
 */
.btn--icon-only,
.btn--icon-only--small,
.btn--icon-only--large {
    text-align: center;
    min-width: 1em;
}
.btn--icon-only {
    padding-left: $base-spacing-unit / 1.6;
    padding-right: $base-spacing-unit / 1.6;
}

.btn--icon-only--small {
    padding-left: $base-spacing-unit / 2.5;
    padding-right: $base-spacing-unit / 2.5;
}

.btn--icon-only--large {
    padding-left: $base-spacing-unit / .9;
    padding-right: $base-spacing-unit / .9;
}


.btn--icon {
    padding-left: $base-spacing-unit/2;
    & > .i {
        margin-right: $base-spacing-unit / 2;
    } 
}

.btn--icon--rev {
    padding-right: $base-spacing-unit/2;
    & > .i {
        margin-left: $base-spacing-unit / 2;
    } 
}

.btn--icon-large{
    padding-left: $base-spacing-unit;
    padding-right: $base-spacing-unit * 2;
    & > .i {
        margin-right: $base-spacing-unit / 2;
    } 
}

.btn--icon-large--rev{
    padding-left: $base-spacing-unit * 2;
    padding-right: $base-spacing-unit;
    & > .i {
        margin-left: $base-spacing-unit / 2;
    } 
}

.btn--icon-small{
    padding-left: $base-spacing-unit / 3;
    padding-right: $base-spacing-unit / 2; 
    & > .i {
        margin-right: $base-spacing-unit / 4;
    }
}

.btn--icon-small--rev{
    padding-left: $base-spacing-unit / 2;
    padding-right: $base-spacing-unit / 4;
    & > .i {
        margin-left: $base-spacing-unit / 2;
    }
}


/**
 * ----------------------------------------------------------------------------
 * Button behaviors
 * ----------------------------------------------------------------------------
 */

/**
 * Simple bounces
 * ----------------------------------------------------------------------------
 */
.btn--bounce,
.btn--bob{
    position: relative;
    @include vendor(transition, bottom 100ms ease-out);
}

    .btn--bounce:active {
        bottom: -2px;
    }

    .btn--bob:active {
        bottom: -1px;
    }

/**
 * Bounce the icon to a side
 */
.btn--bounce-icon--right .i,
.btn--bounce-icon--left .i,
.btn--bounce-icon--bottom .i,
.btn--bounce-icon--top .i {
    position: relative;
    @include vendor(transition-timing-function, cubic-bezier(0.165, 0.840, 0.440, 1.000));
    @include vendor(transition-duration, 300ms);
}

    .btn--bounce-icon--right:hover .i {
        @include vendor(transition-property, left);
        left: .3125em;
    }

    .btn--bounce-icon--left:hover .i {
        @include vendor(transition-property, right);
        right: .3125em;
    }

    .btn--bounce-icon--bottom:hover .i {
        @include vendor(transition-property, top);
        top: .3125em;
    }

    .btn--bounce-icon--top:hover .i {
        @include vendor(transition-property, bottom);
        bottom: .3125em;
    }

/**
 * Inset buttons on block level elements
 * ----------------------------------------------------------------------------
 */
.btn--inset {
    position: relative;

}
    .btn--inset:after {
        position: absolute;
        top: 0;
        left: 0;
        bottom: 0;
        right: 0;
        visibility: hidden;
        @include vendor(transition, border-width 100ms ease-out, visibility 100ms);
        content: " ";
        display: block;
        border-width: 0;
        border-color: inherit;
        border-style: solid;
    }
    .btn--inset:hover:after {
        border-width: 4px;
        visibility: visible;
    }
    .btn--inset-primary:after {
        border-color: #3977B1;
    }
    .btn--inset-secondary:after {
        border-color: #eb3930;
    }
    .btn--inset-large:hover:after {
        border-width: 8px;
    }
    .btn--inset-small:hover:after {
        border-width: 1px;
    }

/**
 * Buttons that show a loading indicator when clicked
 * ----------------------------------------------------------------------------
 */
.btn--spinner {
    position: relative;
    cursor: default;
}

    .btn--spinner .btn--label {
        opacity: 0;
        visibility: hidden;
    }

    .btn--spinner:after {
        position: absolute;
        top: 0;
        left: 0;
        display: inline-block;
        content: url('../images/spinner.png');
        text-align: center;
        margin-left: auto;
        margin-right: auto;
        width: 100%;
    }
    .btn--spinner--text:after {
        content: attr(data-btn-loading-indicator);
    }
/**
 *
 * Form helpers
 *
 * ----------------------------------------------------------------------------
 * 
 * Structure:
 *
 *      1. ...
 *		
 *
 *
 * ----------------------------------------------------------------------------
 *
 */

// ADD STUFF PEOPLE!
.page-header {
    padding-bottom: $bs--xxs;
    > :first-child {
        margin-top:0;

    }
    //quick fix need to change this
    > span {
        font-weight: normal;
    }
}
/**
 * Icon block
 * ----------------------------------------------------------------------------
 */

.icon-text,
.icon-text--rev{/* a, div, etc */
    @extend %inline-block;
    display:inline-block; //CHECK why this isn't extending
}

.i{
    overflow: hidden; /* for IE6 */
    vertical-align: middle;
    /* SMACSS line-height: 0; ? */
    .icon-text &,
    .btn--icon &{
        margin-right: $base-spacing-unit/3;
    }

    .icon-text--rev &,
    .btn--icon-rev &{
        margin-left: $base-spacing-unit/3;
    }
}

/*
    Responsive images
    <img src="..." class="img--responsive" alt="Responsive image">
*/

.img--responsive {
    height: auto;
    max-width: 100%;
}

/**
 * 8. List styles
 * ----------------------------------------------------------------------------
 */

.list-unstyled {
    list-style: none;
    padding-left: 0;
    margin: 0 0 0 0;
}

    .list-unstyled > li {
        list-style: none;
        margin-left: 0;
    }

    .list--inline {
        @extend .clearfix;
        @extend .list-unstyled;
    }

    .list--inline > li {
        @extend .inline-block;
        margin: 0;
    }

//default list style in this case its circles
%list-styled {
    padding-left:$bs--m;
    margin-top: $bs--xs; //same as the margin top on p tags
    list-style: circle;
}

.list-styled {
    @extend %list-styled;
}

    //decimal list
    .list-styled--decimal {
        @extend %list-styled;
        list-style: decimal-leading-zero;
        padding-left:$bs--l;
    }

    //alpha list
    .list-styled--alpha {
        @extend %list-styled;
        list-style: lower-alpha;
    }



/**
 * 13. Description lists
 * ----------------------------------------------------------------------------
 * Defaults to being stacked without any of the below styles applied, until the
 *
 */

dl {
    @extend .m--m;
}
    dt,
    dd {
        line-height: $line-height-xs;
    }
    dt {
        font-weight: bold;
    }
    dd {
      margin-left: 0; // Undo browser default
    }


/**
 * 13. Horizontal description lists
 * ----------------------------------------------------------------------------
 * Defaults to being stacked without any of the below styles applied, until the
 *
 */

//TODO finish this ;)
//@include media('skinny-only') { {
//    .dl-horizontal {
//        dt {
//            @extend %text-overflow;
//            float: left;
//            width: (@component-offset-horizontal - 20);
//            clear: left;
//            text-align: right;
//
//        }
//        dd {
//            @extend %clearfix; // Clear the floated `dt` if an empty `dd` is present
//           margin-left: @component-offset-horizontal;
//
//       }
// }
//}

/**
 * 5. Float an image to the left, with a clearfixed block of content to the right.
 * ----------------------------------------------------------------------------
 <div class='media'>
	<img src='/some/image.png' class='media__image'>
	<div class='media__body'>
       The text!
	</div>
 </div>
 */
.media {
    @extend .clearfix;
    margin-top: $base-spacing-unit;
}

    .media__image{
        float: left;
        margin-right:$base-spacing-unit;
    }

    .media__body{
        @extend .overflow-hidden;
    }

.media--rev {
    @extend .clearfix;
    margin-top: $base-spacing-unit;
}

    .media--rev > .media__image{
        float: right;
        margin-left:$base-spacing-unit;
    }

    .media--rev > .media__body{
        @extend .overflow-hidden;
    }


// Border radii
.radius--xs {
    @include vendor(border-radius, 2px 2px 2px 2px);
}
.radius--s {
    @include vendor(border-radius, 5px 5px 5px 5px);
}
.radius--m {
    @include vendor(border-radius, 10px 10px 10px 10px);
}